//+------------------------------------------------------------------+
//|                    Multi-TF  with Bullish     |
//|                                      Patterns Indicator          |
//+------------------------------------------------------------------+
#property copyright "Custom Indicator"
#property link      ""
#property version   "1.00"
#property indicator_chart_window
#property indicator_buffers 6
#property indicator_plots   6

// Support levels - Changed to white colors
#property indicator_label1  "Support M1"
#property indicator_type1   DRAW_LINE
#property indicator_color1  clrWhite
#property indicator_style1  STYLE_SOLID
#property indicator_width1  2

#property indicator_label2  "Support M5"
#property indicator_type2   DRAW_LINE
#property indicator_color2  clrWhite
#property indicator_style2  STYLE_SOLID
#property indicator_width2  2

#property indicator_label3  "Support M15"
#property indicator_type3   DRAW_LINE
#property indicator_color3  clrWhite
#property indicator_style3  STYLE_SOLID
#property indicator_width3  2

// Resistance levels - Changed to white colors
#property indicator_label4  "Resistance M1"
#property indicator_type4   DRAW_LINE
#property indicator_color4  clrWhite
#property indicator_style4  STYLE_SOLID
#property indicator_width4  2

#property indicator_label5  "Resistance M5"
#property indicator_type5   DRAW_LINE
#property indicator_color5  clrWhite
#property indicator_style5  STYLE_SOLID
#property indicator_width5  2

#property indicator_label6  "Resistance M15"
#property indicator_type6   DRAW_LINE
#property indicator_color6  clrWhite
#property indicator_style6  STYLE_SOLID
#property indicator_width6  2

// Input parameters
input int LookbackPeriod = 20;      // Period for S/R calculation
input int MinTouches = 2;           // Minimum touches for valid S/R
input double MinDistance = 0.5;     // Minimum distance between levels (for Gold)
input bool ShowBullishOnly = true;  // Show only bullish patterns at S/R levels
input bool ShowArrows = true;       // Show arrows for bullish patterns
input int MaxLevels = 5;           // Maximum S/R levels per timeframe

// Indicator buffers
double SupportM1Buffer[];
double SupportM5Buffer[];
double SupportM15Buffer[];
double ResistanceM1Buffer[];
double ResistanceM5Buffer[];
double ResistanceM15Buffer[];

// Arrays to store S/R levels
double SupportLevels[3][10];    // [timeframe][level]
double ResistanceLevels[3][10]; // [timeframe][level]
int SupportCount[3];
int ResistanceCount[3];

// Timeframe constants
enum TIMEFRAMES
{
    TF_M1 = 0,
    TF_M5 = 1,
    TF_M15 = 2
};

//+------------------------------------------------------------------+
//| Custom indicator initialization function                         |
//+------------------------------------------------------------------+
int OnInit()
{
    // Set indicator buffers
    SetIndexBuffer(0, SupportM1Buffer, INDICATOR_DATA);
    SetIndexBuffer(1, SupportM5Buffer, INDICATOR_DATA);
    SetIndexBuffer(2, SupportM15Buffer, INDICATOR_DATA);
    SetIndexBuffer(3, ResistanceM1Buffer, INDICATOR_DATA);
    SetIndexBuffer(4, ResistanceM5Buffer, INDICATOR_DATA);
    SetIndexBuffer(5, ResistanceM15Buffer, INDICATOR_DATA);
    
    // Initialize arrays
    ArrayInitialize(SupportM1Buffer, EMPTY_VALUE);
    ArrayInitialize(SupportM5Buffer, EMPTY_VALUE);
    ArrayInitialize(SupportM15Buffer, EMPTY_VALUE);
    ArrayInitialize(ResistanceM1Buffer, EMPTY_VALUE);
    ArrayInitialize(ResistanceM5Buffer, EMPTY_VALUE);
    ArrayInitialize(ResistanceM15Buffer, EMPTY_VALUE);
    
    return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Custom indicator iteration function                              |
//+------------------------------------------------------------------+
int OnCalculate(const int rates_total,
                const int prev_calculated,
                const datetime &time[],
                const double &open[],
                const double &high[],
                const double &low[],
                const double &close[],
                const long &tick_volume[],
                const long &volume[],
                const int &spread[])
{
    if(rates_total < LookbackPeriod) return(0);
    
    int start = MathMax(prev_calculated - 1, LookbackPeriod);
    
    // Calculate S/R levels for each timeframe
    CalculateSRLevels(PERIOD_M1, TF_M1);
    CalculateSRLevels(PERIOD_M5, TF_M5);
    CalculateSRLevels(PERIOD_M15, TF_M15);
    
    // Update indicator buffers
    for(int i = start; i < rates_total; i++)
    {
        // Check for bullish patterns at S/R levels
        bool bullishAtSupport = IsBullishPattern(i, open, high, low, close) && IsNearSupportLevel(close[i]);
        bool bullishAtResistance = IsBullishPattern(i, open, high, low, close) && IsNearResistanceLevel(close[i]);
        
        // Update buffers based on conditions
        UpdateBuffers(i, bullishAtSupport, bullishAtResistance);
        
        // Show arrows if enabled
        if(ShowArrows && i == rates_total - 1)
        {
            double arrowDistance = _Point * 100; // Adjusted for Gold
            if(bullishAtSupport)
                DrawArrow("BullSupport_" + IntegerToString(i), time[i], low[i] - arrowDistance, 233, clrGreen);
            if(bullishAtResistance)  
                DrawArrow("BullResist_" + IntegerToString(i), time[i], high[i] + arrowDistance, 234, clrOrange);
        }
    }
    
    return(rates_total);
}

//+------------------------------------------------------------------+
//| Calculate Support and Resistance levels                         |
//+------------------------------------------------------------------+
void CalculateSRLevels(ENUM_TIMEFRAMES timeframe, int tfIndex)
{
    double highs[], lows[], opens[], closes[];
    datetime times[];
    
    int copied = CopyHigh(Symbol(), timeframe, 0, LookbackPeriod * 2, highs);
    if(copied <= 0) return;
    
    CopyLow(Symbol(), timeframe, 0, LookbackPeriod * 2, lows);
    CopyOpen(Symbol(), timeframe, 0, LookbackPeriod * 2, opens);
    CopyClose(Symbol(), timeframe, 0, LookbackPeriod * 2, closes);
    CopyTime(Symbol(), timeframe, 0, LookbackPeriod * 2, times);
    
    // Reset counters
    SupportCount[tfIndex] = 0;
    ResistanceCount[tfIndex] = 0;
    
    // Find pivot highs and lows
    for(int i = LookbackPeriod/2; i < copied - LookbackPeriod/2; i++)
    {
        // Check for resistance (pivot high)
        bool isPivotHigh = true;
        for(int j = i - LookbackPeriod/2; j <= i + LookbackPeriod/2; j++)
        {
            if(j != i && highs[j] >= highs[i])
            {
                isPivotHigh = false;
                break;
            }
        }
        
        // Check for support (pivot low)
        bool isPivotLow = true;
        for(int j = i - LookbackPeriod/2; j <= i + LookbackPeriod/2; j++)
        {
            if(j != i && lows[j] <= lows[i])
            {
                isPivotLow = false;
                break;
            }
        }
        
        // Add resistance level
        if(isPivotHigh && ResistanceCount[tfIndex] < MaxLevels)
        {
            double tempArray[10];
            for(int k = 0; k < ResistanceCount[tfIndex]; k++)
                tempArray[k] = ResistanceLevels[tfIndex][k];
                
            if(IsValidLevel(highs[i], tempArray, ResistanceCount[tfIndex]))
            {
                ResistanceLevels[tfIndex][ResistanceCount[tfIndex]] = highs[i];
                ResistanceCount[tfIndex]++;
            }
        }
        
        // Add support level
        if(isPivotLow && SupportCount[tfIndex] < MaxLevels)
        {
            double tempArray[10];
            for(int k = 0; k < SupportCount[tfIndex]; k++)
                tempArray[k] = SupportLevels[tfIndex][k];
                
            if(IsValidLevel(lows[i], tempArray, SupportCount[tfIndex]))
            {
                SupportLevels[tfIndex][SupportCount[tfIndex]] = lows[i];
                SupportCount[tfIndex]++;
            }
        }
    }
}

//+------------------------------------------------------------------+
//| Check if level is valid (not too close to existing)             |
//+------------------------------------------------------------------+
bool IsValidLevel(double level, double &levels[], int count)
{
    double minDist = MinDistance; // Use input parameter directly for Gold
    for(int i = 0; i < count; i++)
    {
        if(MathAbs(level - levels[i]) < minDist)
            return false;
    }
    return true;
}

//+------------------------------------------------------------------+
//| Check for bullish candlestick patterns                          |
//+------------------------------------------------------------------+
bool IsBullishPattern(int index, const double &open[], const double &high[], 
                     const double &low[], const double &close[])
{
    if(index < 2) return false;
    
    double body = close[index] - open[index];
    double prevBody = close[index-1] - open[index-1];
    double range = high[index] - low[index];
    double upperShadow = high[index] - MathMax(open[index], close[index]);
    double lowerShadow = MathMin(open[index], close[index]) - low[index];
    
    // Adjust thresholds for Gold (smaller pip values)
    double minBodySize = _Point * 50; // Minimum body size for Gold
    
    // Bullish engulfing
    if(prevBody < 0 && body > minBodySize && body > MathAbs(prevBody) && 
       open[index] < close[index-1] && close[index] > open[index-1])
        return true;
    
    // Hammer/Doji at support (adjusted for Gold)
    if(lowerShadow > 2 * MathAbs(body) && upperShadow < MathAbs(body) && range > minBodySize)
        return true;
    
    // Morning star pattern
    if(index >= 2 && close[index-2] < open[index-2] && 
       MathAbs(close[index-1] - open[index-1]) < range * 0.2 &&
       close[index] > open[index] && close[index] > (open[index-2] + close[index-2]) / 2)
        return true;
    
    // Strong bullish candle (adjusted for Gold)
    if(body > range * 0.6 && body > minBodySize)
        return true;
    
    return false;
}

//+------------------------------------------------------------------+
//| Check if price is near support level                            |
//+------------------------------------------------------------------+
bool IsNearSupportLevel(double price)
{
    double tolerance = MinDistance; // Direct value for Gold
    
    for(int tf = 0; tf < 3; tf++)
    {
        for(int i = 0; i < SupportCount[tf]; i++)
        {
            if(MathAbs(price - SupportLevels[tf][i]) <= tolerance)
                return true;
        }
    }
    return false;
}

//+------------------------------------------------------------------+
//| Check if price is near resistance level                         |
//+------------------------------------------------------------------+
bool IsNearResistanceLevel(double price)
{
    double tolerance = MinDistance; // Direct value for Gold
    
    for(int tf = 0; tf < 3; tf++)
    {
        for(int i = 0; i < ResistanceCount[tf]; i++)
        {
            if(MathAbs(price - ResistanceLevels[tf][i]) <= tolerance)
                return true;
        }
    }
    return false;
}

//+------------------------------------------------------------------+
//| Update indicator buffers                                         |
//+------------------------------------------------------------------+
void UpdateBuffers(int index, bool bullishAtSupport, bool bullishAtResistance)
{
    // Initialize all buffers to EMPTY_VALUE
    SupportM1Buffer[index] = EMPTY_VALUE;
    SupportM5Buffer[index] = EMPTY_VALUE;
    SupportM15Buffer[index] = EMPTY_VALUE;
    ResistanceM1Buffer[index] = EMPTY_VALUE;
    ResistanceM5Buffer[index] = EMPTY_VALUE;
    ResistanceM15Buffer[index] = EMPTY_VALUE;
    
    // Always show levels, but highlight when bullish patterns occur
    if(!ShowBullishOnly || bullishAtSupport || SupportCount[TF_M1] > 0)
    {
        // Show M1 support levels
        for(int i = 0; i < SupportCount[TF_M1]; i++)
            SupportM1Buffer[index] = SupportLevels[TF_M1][i];
    }
    
    if(!ShowBullishOnly || bullishAtSupport || SupportCount[TF_M5] > 0)
    {
        // Show M5 support levels
        for(int i = 0; i < SupportCount[TF_M5]; i++)
            SupportM5Buffer[index] = SupportLevels[TF_M5][i];
    }
    
    if(!ShowBullishOnly || bullishAtSupport || SupportCount[TF_M15] > 0)
    {
        // Show M15 support levels
        for(int i = 0; i < SupportCount[TF_M15]; i++)
            SupportM15Buffer[index] = SupportLevels[TF_M15][i];
    }
    
    if(!ShowBullishOnly || bullishAtResistance || ResistanceCount[TF_M1] > 0)
    {
        // Show M1 resistance levels
        for(int i = 0; i < ResistanceCount[TF_M1]; i++)
            ResistanceM1Buffer[index] = ResistanceLevels[TF_M1][i];
    }
    
    if(!ShowBullishOnly || bullishAtResistance || ResistanceCount[TF_M5] > 0)
    {
        // Show M5 resistance levels
        for(int i = 0; i < ResistanceCount[TF_M5]; i++)
            ResistanceM5Buffer[index] = ResistanceLevels[TF_M5][i];
    }
    
    if(!ShowBullishOnly || bullishAtResistance || ResistanceCount[TF_M15] > 0)
    {
        // Show M15 resistance levels
        for(int i = 0; i < ResistanceCount[TF_M15]; i++)
            ResistanceM15Buffer[index] = ResistanceLevels[TF_M15][i];
    }
}

//+------------------------------------------------------------------+
//| Draw arrow on chart                                              |
//+------------------------------------------------------------------+
void DrawArrow(string name, datetime time, double price, int arrowCode, color clr)
{
    ObjectDelete(0, name);
    ObjectCreate(0, name, OBJ_ARROW, 0, time, price);
    ObjectSetInteger(0, name, OBJPROP_ARROWCODE, arrowCode);
    ObjectSetInteger(0, name, OBJPROP_COLOR, clr);
    ObjectSetInteger(0, name, OBJPROP_WIDTH, 3);
    ObjectSetInteger(0, name, OBJPROP_BACK, false);
}

//+------------------------------------------------------------------+
//| Cleanup function                                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
{
    // Clean up objects
    ObjectsDeleteAll(0, "BullSupport_");
    ObjectsDeleteAll(0, "BullResist_");
}
